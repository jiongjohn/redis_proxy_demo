# Redis Proxy Configuration - go-redis Mode
# This configuration uses go-redis client with optimized connection pooling

server:
  port: 6380
  max_connections: 1000
  read_timeout: 30s
  write_timeout: 30s
  idle_timeout: 300s
  use_gnet: false          # Use traditional server
  use_affinity: false      # Don't use connection affinity
  use_goredis: true        # âœ… Enable go-redis mode with session management

# go-redis Configuration
go_redis:
  pool_size: 10            # Redis connection pool size (10 connections for 1000+ clients)
  min_idle_conns: 2        # Keep minimum 2 idle connections
  max_conn_age: 1h         # Recycle connections after 1 hour
  idle_timeout: 30m        # Close idle connections after 30 minutes  
  dial_timeout: 10s        # Connection establishment timeout
  read_timeout: 5s         # Read operation timeout
  write_timeout: 5s        # Write operation timeout
  session_timeout: 1h      # Client session timeout
  stats_interval: 60s      # Statistics reporting interval

redis:
  host: localhost
  port: 6379
  password: ""             # Redis password (empty for no auth)
  database: 0
  pool_size: 10            # Used by go-redis (overridden by go_redis.pool_size)
  min_idle_connections: 2
  max_idle_connections: 5
  connection_timeout: 5s
  read_timeout: 3s
  write_timeout: 3s

cache:
  enabled: true
  max_size: 256MB
  ttl: 300s
  eviction_policy: lru
  cleanup_interval: 60s

kafka:
  enabled: true
  brokers:
    - localhost:9092
  topic: redis-cache-events
  group_id: redis-proxy-group
  auto_offset_reset: latest
  session_timeout: 30s
  heartbeat_interval: 3s

monitoring:
  enabled: true
  big_key_threshold: 10MB
  stats_interval: 60s
  metrics_port: 8080
  health_check_path: /health
  metrics_path: /metrics
